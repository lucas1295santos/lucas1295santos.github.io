<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content"><channel><title>Lucas Oliveira dot Tech</title><description>Tech blog about Swift and Engineering topics</description><link>https://lucas1295santos.github.io/</link><language>en</language><lastBuildDate>Sun, 24 May 2020 19:58:51 -0300</lastBuildDate><pubDate>Sun, 24 May 2020 19:58:51 -0300</pubDate><ttl>250</ttl><atom:link href="https://lucas1295santos.github.io/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://lucas1295santos.github.io/posts/quick-tip-1</guid><title>Quick tip #1: Array copy-on-write</title><description>I'm on a quest to study data structures in Swift, and one really cool feature that Swift arrays implement is copy-on-write!</description><link>https://lucas1295santos.github.io/posts/quick-tip-1</link><pubDate>Sun, 24 May 2020 00:00:00 -0300</pubDate><content:encoded><![CDATA[<h1>Quick tip #1: Array copy-on-write</h1><p>I'm studying data structures, and its implementations in Swift following the Udacity course <a href="https://www.udacity.com/course/data-structures-and-algorithms-in-swift--ud1011">Data Structures &amp; Algorithms in Swift</a> (I'm on early lessons, but from what I've seen so far, I recommend it). And one really nice thing that I learned on the arrays lesson, is that Swift arrays implement copy-on-write. But what does that mean?</p><p>Copy-on-write is a pattern that aims to save storage or memory allocation whenever it is possible by delaying copying a resource as long as it is possible. The copy only happens when someone writes on that resource, in other words, when someone edit, delete or add any information to it.</p><p>It is way easier to understand with some code, so here it goes.</p><pre><code class="language-swift">var originalArray = [1,2,3]
var copyArray = originalArray

originalArray.withUnsafeBufferPointer { (pointer) in
  print("originalArray: \(pointer)")
}
copyArray.withUnsafeBufferPointer { (pointer) in
  print("copyArray: \(pointer)")
}

print("Editing copyArray...")
copyArray[2] = 20

originalArray.withUnsafeBufferPointer { (pointer) in
    print("originalArray: \(pointer)")
}
copyArray.withUnsafeBufferPointer { (pointer) in
    print("copyArray: \(pointer)")
}
</code></pre><p>In the example above, I use <a href="https://developer.apple.com/documentation/swift/array/2994771-withunsafebufferpointer">withUnsafeBufferPointer</a> to get access to the pointer of the starting address of the array. When the code is executed, it outputs the following:</p><pre><code>originalArray: UnsafeBufferPointer(start: 0x0000600002ca3320, count: 3)
copyArray: UnsafeBufferPointer(start: 0x0000600002ca3320, count: 3)
Editing copyArray...
originalArray: UnsafeBufferPointer(start: 0x0000600002ca3320, count: 3)
copyArray: UnsafeBufferPointer(start: 0x0000600002cd95a0, count: 3)
</code></pre><p>You can see that prior to the edition of <code>copyArray</code> both arrays are stored at the same memory address, and only after I did a write operation on it all the values from <code>originalArray</code> were copied over to another memory address, so than the copy could be edited without changing anything at the original.</p><p>Since this all happens under the hood, in most cases it makes no practical difference if you are aware of this language characteristic. But maybe you have a really specific situation where you want to give more context to the code by reassigning one array to a different name, and now you know that you will be paying basically nothing for it in terms of memory usage.</p><p>Thank you for reading, take care, and good coding!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://lucas1295santos.github.io/posts/first-post</guid><title>This blog is written in Swift!</title><description>Recently, I discovered [Publish](https://github.com/johnsundell/publish), a static website generator that uses Swift, written by [John Sundell](https://swiftbysundell.com).&lt;br&gt;&lt;/br&gt; The main idea is to declare all the pieces of your website like a *Swift Package*, and then using [Plot](https://github.com/JohnSundell/Plot) to generate HTML code using the type-safety of Swift, and finally using [Ink](https://github.com/JohnSundell/Ink) to render posts written in **Markdown**. (like this one!) &lt;br&gt;&lt;/br&gt; It may sound like a lot of tools to handle, but in reality, Publish already does most of the work for you.</description><link>https://lucas1295santos.github.io/posts/first-post</link><pubDate>Mon, 20 Apr 2020 00:00:00 -0300</pubDate><content:encoded><![CDATA[<h1>This blog is written in Swift!</h1><p>Recently, I discovered <a href="https://github.com/johnsundell/publish">Publish</a>, a static website generator that uses Swift, written by <a href="https://swiftbysundell.com">John Sundell</a>. The main idea is to declare all the pieces of your website like a <em>Swift Package</em> and then using <a href="https://github.com/JohnSundell/Plot">Plot</a> to generate HTML code using the type-safety of Swift, and finally using <a href="https://github.com/JohnSundell/Ink">Ink</a> to render posts written in <strong>Markdown</strong>. (like this one!) It may sound like a lot of tools to handle, but in reality, Publish already does most of the work for you.</p><p>Before digging into how Publish works, I highly recommend that you read the README of <a href="https://github.com/johnsundell/publish">Publish's Github</a> to have an overview on the framework, and all the step-by-step of how to <strong>install</strong> and <strong>setup</strong> a starter project.</p><p>It is worth noting that there you can find a <strong>HowTo</strong> folder where the community registers how to do things that they struggled at first but then figured it out.</p><h2>Files structure</h2><img src="https://raw.githubusercontent.com/lucas1295santos/lucas1295santos.github.io/master/images/post1_img1.png" alt="File structure" style="width:200px;"/><p>When you start a new <strong>Publish</strong> website, it will create a file structure like the one above. The first thing we'll do is to understand what is the basic website generated.</p><ul><li><em>Package.swift</em> is a file where you should declare dependencies for your project. If you never worked with Swift Package Manager, you can think of this file as a <em>Podfile</em> where you declare the <em>Cocoa pods</em> that you want to import. You also can learn more at this great article at <a href="https://www.swiftbysundell.com/articles/managing-dependencies-using-the-swift-package-manager/">Swift by Sundell</a>.</li></ul><ul><li><em>Content</em> is where you'll add posts, audio, video, or any type of content your website is about. This very blog post is currently in this folder.</li></ul><ul><li><em>Output</em> folder is generated after you run <code>publish generate</code>, and <strong>this is the actual website</strong>. You shouldn't really code or add anything here, Publish will generate everything when you use the <code>generate</code> command.</li></ul><ul><li><em>Resources</em> folder is where you can store assets that your pages will use, and <strong>CSS</strong> styles as well. Currently, I have a <em>images</em> and <em>css</em> folders here. The image of the file structure above is stored int this folder.</li></ul><ul><li><em>Sources</em> folder is where you'll code! Currently, there is a folder with your project's name and a <code>main.swift</code> inside.</li></ul><h2>main.swift</h2><p>This file declares your website through a structure that implements <code>Website</code>, and defines the publishing steps for it.</p><pre><code class="language-swift">struct Bla: Website {
    // Website configurations go here
}
</code></pre><p>And outside of the Website defining structure, you'll have the publish step. This is what will be executed on <code>publish deploy</code>.</p><pre><code class="language-swift">try Bla().publish(
  withTheme: .custom,
  additionalSteps: [
    .deploy(using: .git("git@github.com-lucas1295santos:lucas1295santos/lucas1295santos.github.io.git"))
  ]
)
</code></pre><p>On the example above I did a really basic publish workflow, where I use <strong>Github Pages</strong> to host this website and make it available at this domain. I also declare that I want to use a theme called <code>custom</code> to render this website (I'll talk about that in a bit). But this can easily become a robust deployment pipeline if your website needs to.</p><pre><code class="language-swift">try Bla().publish(using: [
    .step1(),
    .step2(),
    .step3()
])
</code></pre><h2>Custom theme</h2><p>To give your website some visual identity, you'll probably want to not use the default theme and create your own. I do this by instantiating a new <code>Theme</code> passing a <code>HTMLFactory</code> and the <strong>CSS</strong> resources that I'll use, making it available as a static variable of <code>Theme</code> just to make it easily accessible on my <strong>main.swift</strong>.</p><pre><code class="language-swift">extension Theme {
    static var custom: Self {
        Theme(
            htmlFactory: CustomHTMLFactory(),
            resourcePaths: ["Resources/css/styles.css"]
        )
    }
}
</code></pre><p>The <code>CustomHTLMFactory</code> on the code above is an implementation of the <code>HTMLFactory</code> protocol that generates the HTML layout for each piece of the website.</p><pre><code class="language-swift">private struct CustomHTMLFactory&lt;Site: Website&gt;: HTMLFactory {
    func makeIndexHTML(for index: Index, context: PublishingContext&lt;Site&gt;) throws -&gt; HTML {}
    
    func makeSectionHTML(for section: Section&lt;Site&gt;, context: PublishingContext&lt;Site&gt;) throws -&gt; HTML {}
    
    func makeItemHTML(for item: Item&lt;Site&gt;, context: PublishingContext&lt;Site&gt;) throws -&gt; HTML {}
    
    func makePageHTML(for page: Page, context: PublishingContext&lt;Site&gt;) throws -&gt; HTML {}
    
    func makeTagListHTML(for page: TagListPage, context: PublishingContext&lt;Site&gt;) throws -&gt; HTML? {}
    
    func makeTagDetailsHTML(for page: TagDetailsPage, context: PublishingContext&lt;Site&gt;) throws -&gt; HTML? {}
}
</code></pre><p>I'll not dig any deeper on how to use <strong>Plot</strong> to create the HTML layout required on each method from <code>HTMLFactory</code>, but I highly recommend that you take a look at the implementation of the <code>foundation</code> theme (the one that comes with <strong>Publish</strong>) at the file <code>Theme+Foundation.swift</code> on the <code>Publish</code> package. Copy it, try to change it a little bit, and you will get a hang on how it works in no time (especially if you know any HTML).</p><h2>Wrapping up</h2><p>I'm excited about this framework, and it's being a joy to work with it! And I'm still learning everything that it can do, so I'll post more about it as I learn.</p><p>I Hope that this post gives you a good idea of what it is, and how to get started. And besides the documentations that I referenced throughout the post, you might want to check out <a href="https://youtu.be/JqdS-oi96Gk">this hands-on video</a> from Kilo Loco about getting started on Publish.</p><p>Thank you for reading, take care, and good coding!</p>]]></content:encoded></item></channel></rss>